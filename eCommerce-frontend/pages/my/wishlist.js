import React, {useEffect, useState} from 'react';
import Head from "next/head";
import WishlistPage from "@/components/WishlistPage";
import {useUser} from "@/contexts/UserContext";
import Loader from "@/components/Loader";
import axios from "axios";
import {useToken} from "@/contexts/JWTContext";
import {serverSideTranslations} from "next-i18next/serverSideTranslations";

function Wishlist(props) {

    const {user} = useUser();
    const {jwt} = useToken();

    const [items, setItems] = useState([]);
    const [loader, setLoader] = useState(false);

    const [backendItems, setBackendItems] = useState([]);

    /**
     * When the user is logged in , then we need to populate it with symfony API
     */

    //effect part 1
    useEffect(() => {
            if (Object.keys(user).length !== 0){
            axios.get('/api/my/wishes',
                {
                    headers: {
                        Authorization: `Bearer ${jwt}`
                    },
                    withCredentials: true
                }
            )
                .then(r => {
                    console.log(r.data)
                    setBackendItems(r.data.myWishList.products)
                })
                .catch(e => {
                    console.log(e)
                })

        }

    }, [jwt])

    //effect part 2
    useEffect(() => {
        // Calculate and log the difference whenever backendItems changes

        if (backendItems.length !== 0) {
            //populate frontend
            const notInLocal = backendItems.filter((backendItem) => !items.some((localItem) => localItem.id === backendItem.id));

            console.log("backendItems", backendItems)
            console.log("notInLocal", notInLocal)

            const data = JSON.parse(window.localStorage.getItem(`herbo-wish`))

            const updatedData = [...data, ...notInLocal]

            window.localStorage.setItem(`herbo-wish`, JSON.stringify(updatedData));

            const wishlistUpdateEvent = new Event('wishlistUpdated');
            window.dispatchEvent(wishlistUpdateEvent);

            //populate backend

            const notInBackend = items.filter((localItem) => !backendItems.some((backendItem) => localItem.id === backendItem.id));

            console.log("notInBackend", notInBackend)

            for (const notInBackendElement of notInBackend) {
                axios.post('/api/my/wishlist/populate', {token: jwt, p: notInBackendElement.id}, {withCredentials: true})
                    .then(r => {
                        console.log(r.data)
                    })
                    .catch(e => {
                        console.log(e)
                    })
            }

        } else {
            for (const i of items) {
                axios.post('/api/my/wishlist/populate', {token: jwt, p: i.id}, {withCredentials: true})
                    .then(r => {
                        console.log(r.data)
                    })
                    .catch(e => {
                        console.log(e.message)
                    })
            }
        }
    }, [backendItems]);

    useEffect(() => {

        if(window.localStorage.getItem(`herbo-wish`)){
            setItems(JSON.parse(window.localStorage.getItem(`herbo-wish`)))
        }

        const handleWishlistUpdate = () => {
            if(window.localStorage.getItem(`herbo-wish`)){
                setItems(JSON.parse(window.localStorage.getItem(`herbo-wish`)))
            }
        };


        setLoader(true)
        if(window.localStorage.getItem(`herbo-wish`)){
            setItems(JSON.parse(window.localStorage.getItem(`herbo-wish`)))

            setLoader(false)
        }

        // listening to wishlist updates...

        window.addEventListener('wishlistUpdated', handleWishlistUpdate);

        // Clean up the event listener when component unmounts
        return () => {
            window.removeEventListener('wishlistUpdated', handleWishlistUpdate);
        };
    }, [])

    return (
        <>
            <Head>
                <title>My Wishlist</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                {
                    loader
                    ?
                    <Loader/>
                    :
                    <WishlistPage wishes={items}/>
                }
            </main>
        </>
    );
}

export async function getStaticProps({ locale }) {

    console.log("getStaticProps locale : ", locale)
    const fs = require('fs');

    return {
        props: {
            ...(await serverSideTranslations(locale, ["common"]))
        },
    };
}

export default Wishlist;