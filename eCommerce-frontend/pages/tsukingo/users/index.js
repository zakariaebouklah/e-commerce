import React, {useEffect, useState} from 'react';
import Head from "next/head";
import axios from "axios";
import Loader from "@/components/Loader";
import {useToken} from "@/contexts/JWTContext";
import {useRouter} from "next/router";
import {useUser} from "@/contexts/UserContext";
import {serverSideTranslations} from "next-i18next/serverSideTranslations";
import {useTranslation} from "next-i18next";

function CheckUsers(props) {

    const [users, setUsers] = useState([]);
    const [loader, setLoader] = useState(false);

    const {jwt} = useToken();
    const router = useRouter();
    const {locale} = router

    const {user} = useUser();

    const {t} = useTranslation("common")

    useEffect(() => {

        setLoader(true);

        if(Object.keys(user).length > 0){
            axios.get(
                '/api/users',
                {
                    headers: {
                        Authorization: `Bearer ${jwt}`
                    },
                    withCredentials: true
                }
            )
                .then(r => {
                    console.log(r)
                    setUsers(r.data)
                    setLoader(false)
                })
                .catch(e => {
                    console.log(e)
                })
        }
    }, [jwt])

    useEffect(() => {
        let timeID;
        setLoader(true)
        if(Object.keys(user).length > 0){
            if (!user?.roles?.includes("ROLE_ADMIN")){
                router.replace("/404", "/404", {locale}).then(() => setLoader(false))
            }
            else setLoader(false)
        }
        else {
            setLoader(true)
            timeID = setTimeout(() => router.replace("/404", "/404", {locale}), 1000*30)
        }

        return () => clearTimeout(timeID)
    }, [user.username])

    return (
        <>
            <Head>
                <title>{user?.roles?.includes("ROLE_ADMIN") ? "HerboLAB : See Users" : "HerboLAB"}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {
                loader
                    ?
                    <Loader/>
                    :
                    user.roles?.includes("ROLE_ADMIN")
                    &&
                    <main className="pt-12 lg:pt-24">
                        <div className="p-4">
                            <div className="w-full p-4 m-auto border rounded-lg bg-green-100 dark:bg-white/20 dark:border-black shadow-3xl overflow-y-auto">
                                <div className="my-3 p-3 effect grid grid-cols-2 md:grid-cols-12 sm:grid-cols-3 gap-x-[200px] items-center justify-between cursor-pointer">
                                    <span className="uppercase">{t('name')}</span>
                                    <span className="uppercase hidden lg:grid">{t('id')}</span>
                                    <span className="uppercase">{t('roles')}</span>
                                    <span className="uppercase hidden lg:grid">{t('signed_at')}</span>
                                    <span className="uppercase hidden md:grid">{t('phone')}</span>
                                    <span className="uppercase hidden lg:grid">{t('street')}</span>
                                </div>
                                {
                                    loader
                                        ?
                                        <Loader/>
                                        :
                                        <ul>
                                            {
                                                users.map((u, index) => {
                                                    const {id, username, email, signedAt, phone, street, roles} = u

                                                    console.log(roles)

                                                    return (
                                                        <li key={index} className="hover:shadow-3xl bg-green-50 hover:bg-white dark:bg-dark hover:bg-ble effect rounded-lg my-3 p-2 grid md:grid-cols-12 sm:grid-cols-3 gap-x-[200px] justify-between cursor-pointer items-center">
                                                            <div className="flex items-center">
                                                                <div className="pl-4 flex flex-col">
                                                                    <p className="font-bold hover:underline">{username}</p>
                                                                    <p className="font-light hover:underline">{email}</p>
                                                                </div>
                                                            </div>
                                                            <div className="text-gray-700 hidden dark:text-grn lg:flex">#{id}</div>
                                                            <div className={`text-white text-right sm:text-left flex items-center rounded-lg p-3 w-fit uppercase ${roles.length >1 ? "bg-grn" : "bg-ble"}`}>
                                                                <div className="flex flex-col">
                                                                    {
                                                                        roles.map((r, index) => (
                                                                            <p key={index} className="text-white font-bold">{r}</p>
                                                                        ))
                                                                    }
                                                                </div>
                                                            </div>
                                                            <div className="text-gray-700 hidden dark:text-grn lg:flex">{signedAt ? new Date(signedAt).toLocaleString() : "-"}</div>
                                                            <div className="text-gray-700 hidden dark:text-grn md:flex">{phone}</div>
                                                            <div className="text-gray-700 hidden dark:text-grn lg:flex flex-wrap w-96">{street}</div>

                                                        </li>
                                                    )
                                                })
                                            }
                                        </ul>
                                }
                            </div>
                        </div>
                    </main>
            }

        </>
    );
}

export async function getStaticProps({ locale }) {

    console.log("getStaticProps locale : ", locale)
    const fs = require('fs');

    return {
        props: {
            ...(await serverSideTranslations(locale, ["common"]))
        },
    };
}

export default CheckUsers;