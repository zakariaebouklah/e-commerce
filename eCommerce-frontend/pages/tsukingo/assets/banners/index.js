import React, {useEffect, useState} from 'react';
import Head from "next/head";
import {BiDotsVerticalRounded} from "react-icons/bi";
import DeleteModal from "@/components/DeleteModal";
import axios from "axios";
import Loader from "@/components/Loader";
import {useUser} from "@/contexts/UserContext";
import {useRouter} from "next/router";
import {serverSideTranslations} from "next-i18next/serverSideTranslations";
import {useTranslation} from "next-i18next";

function Banners(props) {

    const [showModals, setShowModals] = useState(false);
    const [banners, setCategories] = useState([]);
    const [bannerId, setBannerId] = useState(null);
    const [loader, setLoader] = useState(false);

    const {user} = useUser();
    const router = useRouter();

    const {locale} = router

    const {t} = useTranslation("common")

    useEffect(() => {

        setLoader(true);

        if(Object.keys(user).length > 0){
            axios.get('/api/banners')
                .then(r => {
                    console.log(r.data)
                    setCategories(r.data)
                    setLoader(false)
                })
                .catch(e => {
                    console.log(e)
                })
        }
    }, [user.username])

    useEffect(() => {
        let timeID;
        console.log("in banner index")
        setLoader(true)
        if(Object.keys(user).length > 0){
            if (!user?.roles?.includes("ROLE_ADMIN")){
                router.replace("/404").then(() => setLoader(false))
            }
            else setLoader(false)
        }else {
            setLoader(true)
            timeID = setTimeout(() => router.replace("/404", "/404", {locale}), 1000*30)
        }

        return () => clearTimeout(timeID)
    }, [user.username])

    return (
        <>
            <Head>
                <title>{user?.roles?.includes("ROLE_ADMIN") ? "HerboLAB : Browse Banners" : "HerboLAB"}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="pt-12 lg:pt-24">
                {
                    user?.roles?.includes("ROLE_ADMIN")
                    ?
                    <div className="p-4">
                        <div className="w-full p-4 m-auto border rounded-lg bg-green-100 dark:bg-white/20 dark:border-black shadow-3xl overflow-y-auto">
                            <div className="my-3 p-3 effect grid grid-cols-2 md:grid-cols-12 sm:grid-cols-3 gap-x-[460px] items-center justify-between cursor-pointer">
                                <span className="uppercase">{t('banner_asset')}</span>
                                <span className="uppercase hidden lg:grid">{t('id')}</span>
                                <span className="uppercase hidden lg:grid">{t('created_at')}</span>
                            </div>
                            {
                                loader
                                    ?
                                    <Loader/>
                                    :
                                    <ul>
                                        {
                                            banners.map((banner, index) => {
                                                const {id, bannerFile, createdAt} = banner

                                                return (
                                                    <li key={index} className="hover:shadow-3xl bg-green-50 hover:bg-white dark:bg-dark hover:bg-ble effect rounded-lg flex justify-evenly my-5 items-center">
                                                        <div>
                                                            {
                                                                bannerFile.endsWith("mp4") || bannerFile.endsWith("mov") || bannerFile.endsWith("flv")
                                                                    ?
                                                                    <video autoPlay className="aspect-square aspect-video my-2 border-2 border-grn rounded-md w-28 h-28 lg:w-52 lg:h-52" muted loop
                                                                           controlsList="nodownload">
                                                                        <source src={bannerFile} about={`video-${id}`}/>
                                                                    </video>
                                                                    :
                                                                    <img src={bannerFile} alt={`banner-${id}`} className="aspect-square my-2 border-2 border-grn rounded-md w-28 h-28 lg:w-52 lg:h-52"/>
                                                            }
                                                        </div>
                                                        <div className="text-gray-700 hidden dark:text-grn lg:flex">#{id}</div>
                                                        <div className={`text-white text-right sm:text-left hidden md:flex items-center rounded-lg p-3 w-fit uppercase bg-teal-800`}>{new Date(createdAt).toLocaleString()}</div>
                                                        <div className="text-gray-700 flex justify-between items-center">
                                                            <div className="container2 w-full space-x-1">
                                                                <div className={`bg-dark dark:bg-teal-500 relative p-5 rounded-lg flex flex-col justify-items-center space-y-4 ${showModals && bannerId === id ? "visible" :"hidden"}`} id="modals">
                                                                    <DeleteModal context={"banner"} bid={id}/>
                                                                </div>
                                                                <button className="p-3" onClick={(e) => {
                                                                    e.preventDefault()
                                                                    e.stopPropagation()
                                                                    setShowModals(prev => !prev)
                                                                    setBannerId(id)
                                                                }}>
                                                                    <BiDotsVerticalRounded/>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </li>
                                                )
                                            })
                                        }
                                    </ul>
                            }
                        </div>
                    </div>
                    :
                    <Loader/>

                }
            </main>
        </>
    );
}

export async function getStaticProps({ locale }) {

    console.log("getStaticProps locale : ", locale)
    const fs = require('fs');

    return {
        props: {
            ...(await serverSideTranslations(locale, ["common"]))
        },
    };
}

export default Banners;