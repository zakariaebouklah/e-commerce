import React, {useState} from 'react';
import Head from "next/head";
import axios from "axios";
import {toast} from "react-toastify";
import Loader from "@/components/Loader";
import {useToken} from "@/contexts/JWTContext";
import {useRouter} from "next/router";
import Rating from "react-star-rating-component";
import {useUser} from "@/contexts/UserContext";
import {serverSideTranslations} from "next-i18next/serverSideTranslations";
import {useTranslation} from "next-i18next";

function NewReview(props) {

    const {jwt} = useToken();

    const router = useRouter();
    const {locale} = router

    const {user} = useUser();

    const { t } = useTranslation('common');

    const [experience, setExperience] = useState("")
    const [rating, setRating] = useState(0);
    const [demoImage, setDemoImage] = useState("")

    const [loader, setLoader] = useState(false);

    const {productName, productId} = router.query

    const handleStarClick = (nextValue, prevValue, name) => {
        setRating(nextValue);
    }

    const handleSubmit = (e) => {
        e.preventDefault()
        let timeID;

        setLoader(true);

        console.log(typeof demoImage)
        console.log(demoImage)

        const reviewDetails = new FormData();
        reviewDetails.append("experience", experience)
        reviewDetails.append("rate", `${rating}`)
        reviewDetails.append("snapImage", demoImage)

        if(Object.keys(user).length > 0){
            axios.post(
                '/api/reviews/new',
                reviewDetails,
                {
                    headers: {
                        Authorization: `Bearer ${jwt}`,
                        pid: productId
                    },
                    withCredentials: true
                })
                .then(r => {
                    setLoader(false);
                    toast.success(r.data.message, {
                        position: "top-center",
                        autoClose: 5000,
                        hideProgressBar: false,
                        closeOnClick: true,
                        pauseOnHover: true,
                        draggable: true,
                        progress: undefined,
                        theme: "dark",
                    })
                    router.push('/','/',{locale}).then()
                })
                .catch(e => {
                    timeID = setTimeout(() => {
                        setLoader(false);
                        toast.error(e.message, {
                            position: "top-center",
                            autoClose: 5000,
                            hideProgressBar: false,
                            closeOnClick: true,
                            pauseOnHover: true,
                            draggable: true,
                            progress: undefined,
                            theme: "dark",
                        })
                        router.push('/','/',{locale}).then()
                    }, 60000)
                })
        }
        else router.replace("/auth/login").then(() => {
            toast.error("You need to be connected to do this action...", {
                position: "top-center",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
                theme: "dark",
            })
        })

        return () => clearTimeout(timeID)

    }

    return (
        <>
            <Head>
                <title>HerboLAB : New Review</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="pt-12 lg:pt-24">
                {
                    loader
                        ?
                        <Loader/>
                        :
                        <div className="px-6 lg:px-8">
                            <h3 className="mb-4 text-xl font-medium text-gray-900 dark:text-white">{t('feedback_message')} {productName}! ðŸŒŸ</h3>
                            <form className="space-y-6" action="#" onSubmit={handleSubmit}>
                                <div>
                                    <label htmlFor="experience" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">{t('thoughts_label')}</label>
                                    <textarea onChange={(e) => setExperience(e.target.value)} name="experience" id="experience" className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder={`${t('thoughts_placeholder')}`} required/>
                                </div>
                                <div>
                                    <label htmlFor="rate" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">{t('rating_label')}</label>
                                    <div className="text-3xl">
                                        <Rating
                                            name="no-value"
                                            value={rating}
                                            onStarClick={(nextValue, prevValue, name) => handleStarClick(nextValue, prevValue, name)}
                                            starCount={5}
                                            starColor={'#ffb400'}
                                            emptyStarColor={'#ccc'}
                                            required
                                        />
                                    </div>
                                </div>
                                <div>
                                    <label htmlFor="image" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">{t('provide_image_label')}</label>
                                    <input onChange={(e) => setDemoImage(e.target.files[0])} name="image" id="image" type="file" placeholder="e.g : How to use the product..." className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
                                </div>
                                <button type="submit" className="w-full text-white bg-teal-800 effect hover:bg-grn focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">{t('done_button')}</button>
                            </form>
                        </div>
                }
            </main>
        </>
    );
}

export async function getStaticProps({ locale }) {

    console.log("getStaticProps locale : ", locale)
    const fs = require('fs');

    return {
        props: {
            ...(await serverSideTranslations(locale, ["common"]))
        },
    };
}

export default NewReview;